#ifndef Engine_Enum_h__
#define Engine_Enum_h__

namespace Engine
{
	enum WINMODE { MODE_FULL, MODE_WIN };

	// Dynamic 컴포넌트 경우 매 프레임마다 갱신해야하는 컴포넌트 집단
	enum COMPONENTID { ID_DYNAMIC, ID_STATIC, ID_END };

	enum INFO {	INFO_RIGHT, INFO_UP, INFO_LOOK, INFO_POS, INFO_END };
	enum ROTATION { ROT_X, ROT_Y, ROT_Z, ROT_END };

	enum TEXTUREID { TEX_NORMAL, TEX_CUBE, TEX_VOLUME, TEX_END };

	enum RENDERID { RENDER_PRIORITY, RENDER_ALPHATEST, RENDER_NONALPHA, RENDER_ALPHA, RENDER_UI, RENDER_END };

	enum CHANNELID { SOUND_EFFECT, SOUND_BGM, SYSTEM_EFFECT, 
			
					SOUND_PLAYER, SOUND_PLAYER_EFFECT, 
					

					// 일반몬스터용 (3)
					SOUND_ENEMY_BROWN, SOUND_ENEMY_GRAY,
					SOUND_ENEMY_NORMAL_EFFECT, 
					
					// 보스용 (4)
					SOUND_ENEMY, SOUND_ENEMY_EFFECT, 
					SOUND_ENEMY_FIRE, SOUND_ENEMY_THUNDER,
					
					SOUND_VFX, SOUND_VFX2, SOUND_VFX3, SOUND_VFX4, MAXCHANNEL };

	enum CHANNEL_GROUP_ID { BGM_GROUP, SND1_GROUP, SND2_GROUP, MAX_CHANNEL_GROUP };

	enum MOUSEKEYSTATE { DIM_LB, DIM_RB, DIM_MB, DIM_MWU, DIM_MWD, DIM_END };

	enum MOUSEMOVESTATE {	DIMS_X, DIMS_Y, DIMS_Z, DIMS_END };

	enum MonsterPhase { Intro, Phase1, Phase2, Phase_End };

	enum ETEAM_ID { ETEAM_PLAYER, ETEAM_MONSTER, ETEAM_BOSS, ETEAM_OBJECT  };

	// 플레이어 상태값
	enum class STATE_PLAYER { NONE, IDLE, SITDOWN, JUMP, DIE, PLAYER_STATE_SIZE_END };

	enum class STATE_RIGHTHAND { NONE, HAND, RUN_HAND, GUN, THOMPSON, STEELPIPE, BEERBOTLE, FRYINGPAN, KICK };

	//플레이어, 몬스터, 보스, 
	enum OBJECT_CLASS {FOOD,	WEAPON,	INTERACTION,	THROW,	BUILDING,	OBJECT_CLASSEND	};


	enum ATTACK_TARGET
	{
		AT_ALL_ATTACK,
		AT_BLACK_BOSS,
		AT_GRAY_MONSTER,
		AT_BROWN_MONSTER,
		AT_END_SIZE
	};

	enum PLAYER_ATTACK_STATE
	{
		PNOMAL_ATTACK,
		PSITDONW_ATTACK,
		PJUMP_ATTACK,
		PRUN_ATTACK,
		PDOUBLE_ATTACK,
		PTRIPLE_ATTACK
	};

	enum EBIT_FLAG_32 : unsigned long
	{
		EBIT_FLAG32_0 = 1UL << 0,
		EBIT_FLAG32_1 = 1UL << 1,
		EBIT_FLAG32_2 = 1UL << 2,
		EBIT_FLAG32_3 = 1UL << 3,
		EBIT_FLAG32_4 = 1UL << 4,
		EBIT_FLAG32_5 = 1UL << 5,
		EBIT_FLAG32_6 = 1UL << 6,
		EBIT_FLAG32_7 = 1UL << 7,
		EBIT_FLAG32_8 = 1UL << 8,
		EBIT_FLAG32_9 = 1UL << 9,
		EBIT_FLAG32_10 = 1UL << 10,
		EBIT_FLAG32_11 = 1UL << 11,
		EBIT_FLAG32_12 = 1UL << 12,
		EBIT_FLAG32_13 = 1UL << 13,
		EBIT_FLAG32_14 = 1UL << 14,
		EBIT_FLAG32_15 = 1UL << 15,
		EBIT_FLAG32_16 = 1UL << 16,
		EBIT_FLAG32_17 = 1UL << 17,
		EBIT_FLAG32_18 = 1UL << 18,
		EBIT_FLAG32_19 = 1UL << 19,
		EBIT_FLAG32_20 = 1UL << 20,
		EBIT_FLAG32_21 = 1UL << 21,
		EBIT_FLAG32_22 = 1UL << 22,
		EBIT_FLAG32_23 = 1UL << 23,
		EBIT_FLAG32_24 = 1UL << 24,
		EBIT_FLAG32_25 = 1UL << 25,
		EBIT_FLAG32_26 = 1UL << 26,
		EBIT_FLAG32_27 = 1UL << 27,
		EBIT_FLAG32_28 = 1UL << 28,
		EBIT_FLAG32_29 = 1UL << 29,
		EBIT_FLAG32_30 = 1UL << 30,
		EBIT_FLAG32_31 = 1UL << 31,
	};
	 

	enum ECOLLISION_LAYER : unsigned long // 10_08_08:42 : 성희 수정 - ELAYER와 이름이 같아 재정의되는 오류 수정 ( ex : ELAYER_PLAYER -> LAYER_PLAYER )
	{
		LAYER_PLAYER			= EBIT_FLAG32_0,
		LAYER_MONSTER			= EBIT_FLAG32_1,
		LAYER_BOSSMONSTER		= EBIT_FLAG32_2,
		LAYER_WALL				= EBIT_FLAG32_3,
		LAYER_ITEM				= EBIT_FLAG32_4,
		LAYER_PROJECTILE		= EBIT_FLAG32_5,		//몬스터 투사체 
		LAYER_PLAYER_ATTACK		= EBIT_FLAG32_6,		// 플레이어 공격
		LAYER_MONSTER_ATTACK	= EBIT_FLAG32_7,		// 몬스터 일반
		LAYER_BOSS_SKILL		= EBIT_FLAG32_8,		// 보스 스킬공격 
		LAYER_TRIGGER			= EBIT_FLAG32_9
	};

	// 아 귀찮아 안해
	enum EBIT_FLAG_64 : unsigned long long
	{

	};

	// (10_09_19:18)성희 추가 : 애니메이션 타입
	enum KEYTYPE
	{
		KEYTYPE_NONE,
		KEYTYPE_LEFTHAND,
		KEYTYPE_RIGHTHAND,
		KEYTYPE_END
	};

	enum EGO_CLASS
	{
		ECLASS_NONE,
		ECLASS_PLAYER,
		ECLASS_BROWN,
		ECLASS_GREY,
		ECLASS_BOSS,
		ECLASS_FOOD,
		ECLASS_WEAPON,
		ECLASS_THROW,
		ECLASS_INTERACTION,
		ECLASS_BUILDING,
	};
}
#endif // Engine_Enum_h__
